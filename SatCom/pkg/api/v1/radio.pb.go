// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: radio.proto

package v1

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Rig State which is sent from radio to clients
type State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentVfo      string   `protobuf:"bytes,1,opt,name=current_vfo,json=currentVfo,proto3" json:"current_vfo,omitempty"`
	Vfo             *Vfo     `protobuf:"bytes,2,opt,name=vfo,proto3" json:"vfo,omitempty"`
	Channel         *Channel `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	RadioOn         bool     `protobuf:"varint,4,opt,name=radio_on,json=radioOn,proto3" json:"radio_on,omitempty"`
	Ptt             bool     `protobuf:"varint,5,opt,name=ptt,proto3" json:"ptt,omitempty"`
	PollingInterval int32    `protobuf:"varint,6,opt,name=polling_interval,json=pollingInterval,proto3" json:"polling_interval,omitempty"` // ms
	SyncInterval    int32    `protobuf:"varint,7,opt,name=sync_interval,json=syncInterval,proto3" json:"sync_interval,omitempty"`          // sec
}

func (x *State) Reset() {
	*x = State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_radio_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*State) ProtoMessage() {}

func (x *State) ProtoReflect() protoreflect.Message {
	mi := &file_radio_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use State.ProtoReflect.Descriptor instead.
func (*State) Descriptor() ([]byte, []int) {
	return file_radio_proto_rawDescGZIP(), []int{0}
}

func (x *State) GetCurrentVfo() string {
	if x != nil {
		return x.CurrentVfo
	}
	return ""
}

func (x *State) GetVfo() *Vfo {
	if x != nil {
		return x.Vfo
	}
	return nil
}

func (x *State) GetChannel() *Channel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *State) GetRadioOn() bool {
	if x != nil {
		return x.RadioOn
	}
	return false
}

func (x *State) GetPtt() bool {
	if x != nil {
		return x.Ptt
	}
	return false
}

func (x *State) GetPollingInterval() int32 {
	if x != nil {
		return x.PollingInterval
	}
	return 0
}

func (x *State) GetSyncInterval() int32 {
	if x != nil {
		return x.SyncInterval
	}
	return 0
}

// sent from clients to radio
type SetState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentVfo      string    `protobuf:"bytes,1,opt,name=current_vfo,json=currentVfo,proto3" json:"current_vfo,omitempty"`
	Vfo             *Vfo      `protobuf:"bytes,2,opt,name=vfo,proto3" json:"vfo,omitempty"`
	Channel         *Channel  `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	VfoOperations   []string  `protobuf:"bytes,4,rep,name=vfo_operations,json=vfoOperations,proto3" json:"vfo_operations,omitempty"`
	RadioOn         bool      `protobuf:"varint,5,opt,name=radio_on,json=radioOn,proto3" json:"radio_on,omitempty"`
	Ptt             bool      `protobuf:"varint,6,opt,name=ptt,proto3" json:"ptt,omitempty"`
	Md              *MetaData `protobuf:"bytes,7,opt,name=md,proto3" json:"md,omitempty"`
	PollingInterval int32     `protobuf:"varint,8,opt,name=polling_interval,json=pollingInterval,proto3" json:"polling_interval,omitempty"` // ms
	SyncInterval    int32     `protobuf:"varint,9,opt,name=sync_interval,json=syncInterval,proto3" json:"sync_interval,omitempty"`          // sec
	UserId          string    `protobuf:"bytes,10,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                            // auther of the message
}

func (x *SetState) Reset() {
	*x = SetState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_radio_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetState) ProtoMessage() {}

func (x *SetState) ProtoReflect() protoreflect.Message {
	mi := &file_radio_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetState.ProtoReflect.Descriptor instead.
func (*SetState) Descriptor() ([]byte, []int) {
	return file_radio_proto_rawDescGZIP(), []int{1}
}

func (x *SetState) GetCurrentVfo() string {
	if x != nil {
		return x.CurrentVfo
	}
	return ""
}

func (x *SetState) GetVfo() *Vfo {
	if x != nil {
		return x.Vfo
	}
	return nil
}

func (x *SetState) GetChannel() *Channel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *SetState) GetVfoOperations() []string {
	if x != nil {
		return x.VfoOperations
	}
	return nil
}

func (x *SetState) GetRadioOn() bool {
	if x != nil {
		return x.RadioOn
	}
	return false
}

func (x *SetState) GetPtt() bool {
	if x != nil {
		return x.Ptt
	}
	return false
}

func (x *SetState) GetMd() *MetaData {
	if x != nil {
		return x.Md
	}
	return nil
}

func (x *SetState) GetPollingInterval() int32 {
	if x != nil {
		return x.PollingInterval
	}
	return 0
}

func (x *SetState) GetSyncInterval() int32 {
	if x != nil {
		return x.SyncInterval
	}
	return 0
}

func (x *SetState) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// capabilities of the radio
type Capabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vfos          []string              `protobuf:"bytes,1,rep,name=vfos,proto3" json:"vfos,omitempty"`
	Modes         []string              `protobuf:"bytes,2,rep,name=modes,proto3" json:"modes,omitempty"`
	VfoOps        []string              `protobuf:"bytes,3,rep,name=vfo_ops,json=vfoOps,proto3" json:"vfo_ops,omitempty"`
	GetFunctions  []string              `protobuf:"bytes,4,rep,name=get_functions,json=getFunctions,proto3" json:"get_functions,omitempty"`
	SetFunctions  []string              `protobuf:"bytes,5,rep,name=set_functions,json=setFunctions,proto3" json:"set_functions,omitempty"`
	GetLevels     []*Value              `protobuf:"bytes,6,rep,name=get_levels,json=getLevels,proto3" json:"get_levels,omitempty"`
	SetLevels     []*Value              `protobuf:"bytes,7,rep,name=set_levels,json=setLevels,proto3" json:"set_levels,omitempty"`
	GetParameters []*Value              `protobuf:"bytes,8,rep,name=get_parameters,json=getParameters,proto3" json:"get_parameters,omitempty"`
	SetParameters []*Value              `protobuf:"bytes,9,rep,name=set_parameters,json=setParameters,proto3" json:"set_parameters,omitempty"`
	MaxRit        int32                 `protobuf:"varint,10,opt,name=max_rit,json=maxRit,proto3" json:"max_rit,omitempty"`
	MaxXit        int32                 `protobuf:"varint,11,opt,name=max_xit,json=maxXit,proto3" json:"max_xit,omitempty"`
	MaxIfShift    int32                 `protobuf:"varint,12,opt,name=max_if_shift,json=maxIfShift,proto3" json:"max_if_shift,omitempty"`
	Filters       map[string]*Int32List `protobuf:"bytes,13,rep,name=filters,proto3" json:"filters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TuningSteps   map[string]*Int32List `protobuf:"bytes,14,rep,name=tuning_steps,json=tuningSteps,proto3" json:"tuning_steps,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Preamps       []int32               `protobuf:"varint,15,rep,packed,name=preamps,proto3" json:"preamps,omitempty"`
	Attenuators   []int32               `protobuf:"varint,16,rep,packed,name=attenuators,proto3" json:"attenuators,omitempty"`
	RigModel      int32                 `protobuf:"varint,17,opt,name=rig_model,json=rigModel,proto3" json:"rig_model,omitempty"`
	ModelName     string                `protobuf:"bytes,18,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`
	Version       string                `protobuf:"bytes,19,opt,name=version,proto3" json:"version,omitempty"`
	MfgName       string                `protobuf:"bytes,20,opt,name=mfg_name,json=mfgName,proto3" json:"mfg_name,omitempty"`
	Status        string                `protobuf:"bytes,21,opt,name=status,proto3" json:"status,omitempty"`
	HasPowerstat  bool                  `protobuf:"varint,22,opt,name=has_powerstat,json=hasPowerstat,proto3" json:"has_powerstat,omitempty"`
	HasAnt        bool                  `protobuf:"varint,23,opt,name=has_ant,json=hasAnt,proto3" json:"has_ant,omitempty"`
	HasRit        bool                  `protobuf:"varint,24,opt,name=has_rit,json=hasRit,proto3" json:"has_rit,omitempty"`
	HasXit        bool                  `protobuf:"varint,25,opt,name=has_xit,json=hasXit,proto3" json:"has_xit,omitempty"`
	HasSplit      bool                  `protobuf:"varint,26,opt,name=has_split,json=hasSplit,proto3" json:"has_split,omitempty"`
	HasTs         bool                  `protobuf:"varint,27,opt,name=has_ts,json=hasTs,proto3" json:"has_ts,omitempty"`
	HasPtt        bool                  `protobuf:"varint,28,opt,name=has_ptt,json=hasPtt,proto3" json:"has_ptt,omitempty"`
}

func (x *Capabilities) Reset() {
	*x = Capabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_radio_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Capabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Capabilities) ProtoMessage() {}

func (x *Capabilities) ProtoReflect() protoreflect.Message {
	mi := &file_radio_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Capabilities.ProtoReflect.Descriptor instead.
func (*Capabilities) Descriptor() ([]byte, []int) {
	return file_radio_proto_rawDescGZIP(), []int{2}
}

func (x *Capabilities) GetVfos() []string {
	if x != nil {
		return x.Vfos
	}
	return nil
}

func (x *Capabilities) GetModes() []string {
	if x != nil {
		return x.Modes
	}
	return nil
}

func (x *Capabilities) GetVfoOps() []string {
	if x != nil {
		return x.VfoOps
	}
	return nil
}

func (x *Capabilities) GetGetFunctions() []string {
	if x != nil {
		return x.GetFunctions
	}
	return nil
}

func (x *Capabilities) GetSetFunctions() []string {
	if x != nil {
		return x.SetFunctions
	}
	return nil
}

func (x *Capabilities) GetGetLevels() []*Value {
	if x != nil {
		return x.GetLevels
	}
	return nil
}

func (x *Capabilities) GetSetLevels() []*Value {
	if x != nil {
		return x.SetLevels
	}
	return nil
}

func (x *Capabilities) GetGetParameters() []*Value {
	if x != nil {
		return x.GetParameters
	}
	return nil
}

func (x *Capabilities) GetSetParameters() []*Value {
	if x != nil {
		return x.SetParameters
	}
	return nil
}

func (x *Capabilities) GetMaxRit() int32 {
	if x != nil {
		return x.MaxRit
	}
	return 0
}

func (x *Capabilities) GetMaxXit() int32 {
	if x != nil {
		return x.MaxXit
	}
	return 0
}

func (x *Capabilities) GetMaxIfShift() int32 {
	if x != nil {
		return x.MaxIfShift
	}
	return 0
}

func (x *Capabilities) GetFilters() map[string]*Int32List {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *Capabilities) GetTuningSteps() map[string]*Int32List {
	if x != nil {
		return x.TuningSteps
	}
	return nil
}

func (x *Capabilities) GetPreamps() []int32 {
	if x != nil {
		return x.Preamps
	}
	return nil
}

func (x *Capabilities) GetAttenuators() []int32 {
	if x != nil {
		return x.Attenuators
	}
	return nil
}

func (x *Capabilities) GetRigModel() int32 {
	if x != nil {
		return x.RigModel
	}
	return 0
}

func (x *Capabilities) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *Capabilities) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Capabilities) GetMfgName() string {
	if x != nil {
		return x.MfgName
	}
	return ""
}

func (x *Capabilities) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Capabilities) GetHasPowerstat() bool {
	if x != nil {
		return x.HasPowerstat
	}
	return false
}

func (x *Capabilities) GetHasAnt() bool {
	if x != nil {
		return x.HasAnt
	}
	return false
}

func (x *Capabilities) GetHasRit() bool {
	if x != nil {
		return x.HasRit
	}
	return false
}

func (x *Capabilities) GetHasXit() bool {
	if x != nil {
		return x.HasXit
	}
	return false
}

func (x *Capabilities) GetHasSplit() bool {
	if x != nil {
		return x.HasSplit
	}
	return false
}

func (x *Capabilities) GetHasTs() bool {
	if x != nil {
		return x.HasTs
	}
	return false
}

func (x *Capabilities) GetHasPtt() bool {
	if x != nil {
		return x.HasPtt
	}
	return false
}

type Int32List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []int32 `protobuf:"varint,14,rep,packed,name=value,proto3" json:"value,omitempty"`
}

func (x *Int32List) Reset() {
	*x = Int32List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_radio_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Int32List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int32List) ProtoMessage() {}

func (x *Int32List) ProtoReflect() protoreflect.Message {
	mi := &file_radio_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int32List.ProtoReflect.Descriptor instead.
func (*Int32List) Descriptor() ([]byte, []int) {
	return file_radio_proto_rawDescGZIP(), []int{3}
}

func (x *Int32List) GetValue() []int32 {
	if x != nil {
		return x.Value
	}
	return nil
}

type Vfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Frequency  float64            `protobuf:"fixed64,2,opt,name=frequency,proto3" json:"frequency,omitempty"`
	Mode       string             `protobuf:"bytes,3,opt,name=mode,proto3" json:"mode,omitempty"`
	PbWidth    int32              `protobuf:"varint,4,opt,name=pb_width,json=pbWidth,proto3" json:"pb_width,omitempty"`
	Ant        int32              `protobuf:"varint,5,opt,name=ant,proto3" json:"ant,omitempty"`
	Rit        int32              `protobuf:"varint,9,opt,name=rit,proto3" json:"rit,omitempty"`
	Xit        int32              `protobuf:"varint,10,opt,name=xit,proto3" json:"xit,omitempty"`
	Split      *Split             `protobuf:"bytes,11,opt,name=split,proto3" json:"split,omitempty"`
	TuningStep int32              `protobuf:"varint,12,opt,name=tuning_step,json=tuningStep,proto3" json:"tuning_step,omitempty"`
	Functions  map[string]bool    `protobuf:"bytes,13,rep,name=functions,proto3" json:"functions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Levels     map[string]float32 `protobuf:"bytes,14,rep,name=levels,proto3" json:"levels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	Parameters map[string]float32 `protobuf:"bytes,15,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
}

func (x *Vfo) Reset() {
	*x = Vfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_radio_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vfo) ProtoMessage() {}

func (x *Vfo) ProtoReflect() protoreflect.Message {
	mi := &file_radio_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vfo.ProtoReflect.Descriptor instead.
func (*Vfo) Descriptor() ([]byte, []int) {
	return file_radio_proto_rawDescGZIP(), []int{4}
}

func (x *Vfo) GetFrequency() float64 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

func (x *Vfo) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *Vfo) GetPbWidth() int32 {
	if x != nil {
		return x.PbWidth
	}
	return 0
}

func (x *Vfo) GetAnt() int32 {
	if x != nil {
		return x.Ant
	}
	return 0
}

func (x *Vfo) GetRit() int32 {
	if x != nil {
		return x.Rit
	}
	return 0
}

func (x *Vfo) GetXit() int32 {
	if x != nil {
		return x.Xit
	}
	return 0
}

func (x *Vfo) GetSplit() *Split {
	if x != nil {
		return x.Split
	}
	return nil
}

func (x *Vfo) GetTuningStep() int32 {
	if x != nil {
		return x.TuningStep
	}
	return 0
}

func (x *Vfo) GetFunctions() map[string]bool {
	if x != nil {
		return x.Functions
	}
	return nil
}

func (x *Vfo) GetLevels() map[string]float32 {
	if x != nil {
		return x.Levels
	}
	return nil
}

func (x *Vfo) GetParameters() map[string]float32 {
	if x != nil {
		return x.Parameters
	}
	return nil
}

// Metadata is used to indicate if a particular
// field has been set. This is needed since protobuf 3
// would otherwise set default values
type MetaData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasFrequency       bool `protobuf:"varint,1,opt,name=has_frequency,json=hasFrequency,proto3" json:"has_frequency,omitempty"`
	HasMode            bool `protobuf:"varint,2,opt,name=has_mode,json=hasMode,proto3" json:"has_mode,omitempty"`
	HasPbWidth         bool `protobuf:"varint,3,opt,name=has_pb_width,json=hasPbWidth,proto3" json:"has_pb_width,omitempty"`
	HasAnt             bool `protobuf:"varint,4,opt,name=has_ant,json=hasAnt,proto3" json:"has_ant,omitempty"`
	HasRit             bool `protobuf:"varint,5,opt,name=has_rit,json=hasRit,proto3" json:"has_rit,omitempty"`
	HasXit             bool `protobuf:"varint,6,opt,name=has_xit,json=hasXit,proto3" json:"has_xit,omitempty"`
	HasSplit           bool `protobuf:"varint,7,opt,name=has_split,json=hasSplit,proto3" json:"has_split,omitempty"`
	HasTuningStep      bool `protobuf:"varint,8,opt,name=has_tuning_step,json=hasTuningStep,proto3" json:"has_tuning_step,omitempty"`
	HasFunctions       bool `protobuf:"varint,9,opt,name=has_functions,json=hasFunctions,proto3" json:"has_functions,omitempty"`
	HasLevels          bool `protobuf:"varint,10,opt,name=has_levels,json=hasLevels,proto3" json:"has_levels,omitempty"`
	HasParameters      bool `protobuf:"varint,11,opt,name=has_parameters,json=hasParameters,proto3" json:"has_parameters,omitempty"`
	HasPtt             bool `protobuf:"varint,12,opt,name=has_ptt,json=hasPtt,proto3" json:"has_ptt,omitempty"`
	HasRadioOn         bool `protobuf:"varint,13,opt,name=has_radio_on,json=hasRadioOn,proto3" json:"has_radio_on,omitempty"`
	HasPollingInterval bool `protobuf:"varint,14,opt,name=has_polling_interval,json=hasPollingInterval,proto3" json:"has_polling_interval,omitempty"`
	HasSyncInterval    bool `protobuf:"varint,15,opt,name=has_sync_interval,json=hasSyncInterval,proto3" json:"has_sync_interval,omitempty"`
}

func (x *MetaData) Reset() {
	*x = MetaData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_radio_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaData) ProtoMessage() {}

func (x *MetaData) ProtoReflect() protoreflect.Message {
	mi := &file_radio_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaData.ProtoReflect.Descriptor instead.
func (*MetaData) Descriptor() ([]byte, []int) {
	return file_radio_proto_rawDescGZIP(), []int{5}
}

func (x *MetaData) GetHasFrequency() bool {
	if x != nil {
		return x.HasFrequency
	}
	return false
}

func (x *MetaData) GetHasMode() bool {
	if x != nil {
		return x.HasMode
	}
	return false
}

func (x *MetaData) GetHasPbWidth() bool {
	if x != nil {
		return x.HasPbWidth
	}
	return false
}

func (x *MetaData) GetHasAnt() bool {
	if x != nil {
		return x.HasAnt
	}
	return false
}

func (x *MetaData) GetHasRit() bool {
	if x != nil {
		return x.HasRit
	}
	return false
}

func (x *MetaData) GetHasXit() bool {
	if x != nil {
		return x.HasXit
	}
	return false
}

func (x *MetaData) GetHasSplit() bool {
	if x != nil {
		return x.HasSplit
	}
	return false
}

func (x *MetaData) GetHasTuningStep() bool {
	if x != nil {
		return x.HasTuningStep
	}
	return false
}

func (x *MetaData) GetHasFunctions() bool {
	if x != nil {
		return x.HasFunctions
	}
	return false
}

func (x *MetaData) GetHasLevels() bool {
	if x != nil {
		return x.HasLevels
	}
	return false
}

func (x *MetaData) GetHasParameters() bool {
	if x != nil {
		return x.HasParameters
	}
	return false
}

func (x *MetaData) GetHasPtt() bool {
	if x != nil {
		return x.HasPtt
	}
	return false
}

func (x *MetaData) GetHasRadioOn() bool {
	if x != nil {
		return x.HasRadioOn
	}
	return false
}

func (x *MetaData) GetHasPollingInterval() bool {
	if x != nil {
		return x.HasPollingInterval
	}
	return false
}

func (x *MetaData) GetHasSyncInterval() bool {
	if x != nil {
		return x.HasSyncInterval
	}
	return false
}

// Channel is currently not yet implemented
type Channel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel int32 `protobuf:"varint,1,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (x *Channel) Reset() {
	*x = Channel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_radio_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Channel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Channel) ProtoMessage() {}

func (x *Channel) ProtoReflect() protoreflect.Message {
	mi := &file_radio_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Channel.ProtoReflect.Descriptor instead.
func (*Channel) Descriptor() ([]byte, []int) {
	return file_radio_proto_rawDescGZIP(), []int{6}
}

func (x *Channel) GetChannel() int32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

// Value is used for Levels and Parameters
type Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Step float32 `protobuf:"fixed32,2,opt,name=step,proto3" json:"step,omitempty"`
	Min  float32 `protobuf:"fixed32,3,opt,name=min,proto3" json:"min,omitempty"`
	Max  float32 `protobuf:"fixed32,4,opt,name=max,proto3" json:"max,omitempty"`
}

func (x *Value) Reset() {
	*x = Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_radio_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value) ProtoMessage() {}

func (x *Value) ProtoReflect() protoreflect.Message {
	mi := &file_radio_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value.ProtoReflect.Descriptor instead.
func (*Value) Descriptor() ([]byte, []int) {
	return file_radio_proto_rawDescGZIP(), []int{7}
}

func (x *Value) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Value) GetStep() float32 {
	if x != nil {
		return x.Step
	}
	return 0
}

func (x *Value) GetMin() float32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *Value) GetMax() float32 {
	if x != nil {
		return x.Max
	}
	return 0
}

type Function struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Func  string `protobuf:"bytes,1,opt,name=func,proto3" json:"func,omitempty"`
	Value bool   `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Function) Reset() {
	*x = Function{}
	if protoimpl.UnsafeEnabled {
		mi := &file_radio_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Function) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Function) ProtoMessage() {}

func (x *Function) ProtoReflect() protoreflect.Message {
	mi := &file_radio_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Function.ProtoReflect.Descriptor instead.
func (*Function) Descriptor() ([]byte, []int) {
	return file_radio_proto_rawDescGZIP(), []int{8}
}

func (x *Function) GetFunc() string {
	if x != nil {
		return x.Func
	}
	return ""
}

func (x *Function) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type Level struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Func  string `protobuf:"bytes,1,opt,name=func,proto3" json:"func,omitempty"`
	Value bool   `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Level) Reset() {
	*x = Level{}
	if protoimpl.UnsafeEnabled {
		mi := &file_radio_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Level) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Level) ProtoMessage() {}

func (x *Level) ProtoReflect() protoreflect.Message {
	mi := &file_radio_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Level.ProtoReflect.Descriptor instead.
func (*Level) Descriptor() ([]byte, []int) {
	return file_radio_proto_rawDescGZIP(), []int{9}
}

func (x *Level) GetFunc() string {
	if x != nil {
		return x.Func
	}
	return ""
}

func (x *Level) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type Parameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Param string `protobuf:"bytes,1,opt,name=param,proto3" json:"param,omitempty"`
	Value bool   `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Parameter) Reset() {
	*x = Parameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_radio_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Parameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Parameter) ProtoMessage() {}

func (x *Parameter) ProtoReflect() protoreflect.Message {
	mi := &file_radio_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Parameter.ProtoReflect.Descriptor instead.
func (*Parameter) Descriptor() ([]byte, []int) {
	return file_radio_proto_rawDescGZIP(), []int{10}
}

func (x *Parameter) GetParam() string {
	if x != nil {
		return x.Param
	}
	return ""
}

func (x *Parameter) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type Split struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled   bool    `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Vfo       string  `protobuf:"bytes,2,opt,name=vfo,proto3" json:"vfo,omitempty"`
	Frequency float64 `protobuf:"fixed64,3,opt,name=frequency,proto3" json:"frequency,omitempty"`
	Mode      string  `protobuf:"bytes,4,opt,name=mode,proto3" json:"mode,omitempty"`
	PbWidth   int32   `protobuf:"varint,5,opt,name=pbWidth,proto3" json:"pbWidth,omitempty"`
}

func (x *Split) Reset() {
	*x = Split{}
	if protoimpl.UnsafeEnabled {
		mi := &file_radio_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Split) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Split) ProtoMessage() {}

func (x *Split) ProtoReflect() protoreflect.Message {
	mi := &file_radio_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Split.ProtoReflect.Descriptor instead.
func (*Split) Descriptor() ([]byte, []int) {
	return file_radio_proto_rawDescGZIP(), []int{11}
}

func (x *Split) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Split) GetVfo() string {
	if x != nil {
		return x.Vfo
	}
	return ""
}

func (x *Split) GetFrequency() float64 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

func (x *Split) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *Split) GetPbWidth() int32 {
	if x != nil {
		return x.PbWidth
	}
	return 0
}

var File_radio_proto protoreflect.FileDescriptor

var file_radio_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x73,
	0x68, 0x61, 0x63, 0x6b, 0x62, 0x75, 0x73, 0x2e, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x22, 0xff, 0x01,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x76, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x03, 0x76, 0x66, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x68, 0x61, 0x63, 0x6b, 0x62, 0x75, 0x73,
	0x2e, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2e, 0x56, 0x66, 0x6f, 0x52, 0x03, 0x76, 0x66, 0x6f, 0x12,
	0x31, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x73, 0x68, 0x61, 0x63, 0x6b, 0x62, 0x75, 0x73, 0x2e, 0x72, 0x61, 0x64, 0x69,
	0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x5f, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x4f, 0x6e, 0x12, 0x10, 0x0a,
	0x03, 0x70, 0x74, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x70, 0x74, 0x74, 0x12,
	0x29, 0x0a, 0x10, 0x70, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x6f, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x79,
	0x6e, 0x63, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22,
	0xec, 0x02, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x66, 0x6f, 0x12, 0x25, 0x0a,
	0x03, 0x76, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x68, 0x61,
	0x63, 0x6b, 0x62, 0x75, 0x73, 0x2e, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2e, 0x56, 0x66, 0x6f, 0x52,
	0x03, 0x76, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x68, 0x61, 0x63, 0x6b, 0x62, 0x75, 0x73,
	0x2e, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x66, 0x6f, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0d, 0x76, 0x66, 0x6f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x5f, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x4f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x74, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x70, 0x74, 0x74, 0x12, 0x28, 0x0a, 0x02, 0x6d,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x68, 0x61, 0x63, 0x6b, 0x62,
	0x75, 0x73, 0x2e, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x02, 0x6d, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x70, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xa2,
	0x09, 0x0a, 0x0c, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x76, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x76,
	0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x66, 0x6f,
	0x5f, 0x6f, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x66, 0x6f, 0x4f,
	0x70, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x65, 0x74, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x65, 0x74, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x74, 0x5f, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x65, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x0a,
	0x67, 0x65, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x73, 0x68, 0x61, 0x63, 0x6b, 0x62, 0x75, 0x73, 0x2e, 0x72, 0x61, 0x64, 0x69,
	0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x67, 0x65, 0x74, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x73, 0x12, 0x34, 0x0a, 0x0a, 0x73, 0x65, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x68, 0x61, 0x63, 0x6b, 0x62, 0x75,
	0x73, 0x2e, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x73,
	0x65, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x3c, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x73, 0x68, 0x61, 0x63, 0x6b, 0x62, 0x75, 0x73, 0x2e, 0x72, 0x61, 0x64, 0x69,
	0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x67, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3c, 0x0a, 0x0e, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x73, 0x68, 0x61, 0x63, 0x6b, 0x62, 0x75, 0x73, 0x2e, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x73, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x69, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x52, 0x69, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x6d, 0x61, 0x78, 0x5f, 0x78, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x6d, 0x61, 0x78, 0x58, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x66,
	0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61,
	0x78, 0x49, 0x66, 0x53, 0x68, 0x69, 0x66, 0x74, 0x12, 0x43, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x68, 0x61, 0x63,
	0x6b, 0x62, 0x75, 0x73, 0x2e, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x50, 0x0a,
	0x0c, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x68, 0x61, 0x63, 0x6b, 0x62, 0x75, 0x73, 0x2e, 0x72,
	0x61, 0x64, 0x69, 0x6f, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x2e, 0x54, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x65, 0x70, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0b, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x65, 0x70, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x61, 0x6d, 0x70, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x07, 0x70, 0x72, 0x65, 0x61, 0x6d, 0x70, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x74, 0x74,
	0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b,
	0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x69, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x72, 0x69, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x66, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x66, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x61, 0x73, 0x5f, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x73, 0x74, 0x61, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x68, 0x61, 0x73,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x74, 0x61, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x61, 0x73,
	0x5f, 0x61, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x61, 0x73, 0x41,
	0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x5f, 0x72, 0x69, 0x74, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x61, 0x73, 0x52, 0x69, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x68,
	0x61, 0x73, 0x5f, 0x78, 0x69, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x61,
	0x73, 0x58, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x5f, 0x73, 0x70, 0x6c, 0x69,
	0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x68, 0x61, 0x73, 0x53, 0x70, 0x6c, 0x69,
	0x74, 0x12, 0x15, 0x0a, 0x06, 0x68, 0x61, 0x73, 0x5f, 0x74, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x68, 0x61, 0x73, 0x54, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x5f,
	0x70, 0x74, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x61, 0x73, 0x50, 0x74,
	0x74, 0x1a, 0x55, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x68, 0x61, 0x63, 0x6b, 0x62, 0x75, 0x73, 0x2e, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x59, 0x0a, 0x10, 0x54, 0x75, 0x6e, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x65, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x73, 0x68, 0x61, 0x63, 0x6b, 0x62, 0x75, 0x73, 0x2e, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x21, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xce, 0x04, 0x0a, 0x03, 0x56, 0x66, 0x6f, 0x12, 0x1c,
	0x0a, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x70, 0x62, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x70, 0x62, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x61,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x61, 0x6e, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x72, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x69, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x78, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x78, 0x69,
	0x74, 0x12, 0x2b, 0x0a, 0x05, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x73, 0x68, 0x61, 0x63, 0x6b, 0x62, 0x75, 0x73, 0x2e, 0x72, 0x61, 0x64, 0x69,
	0x6f, 0x2e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x05, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x65, 0x70, 0x12,
	0x40, 0x0a, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x68, 0x61, 0x63, 0x6b, 0x62, 0x75, 0x73, 0x2e, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x2e, 0x56, 0x66, 0x6f, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x37, 0x0a, 0x06, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x68, 0x61, 0x63, 0x6b, 0x62, 0x75, 0x73, 0x2e, 0x72, 0x61, 0x64,
	0x69, 0x6f, 0x2e, 0x56, 0x66, 0x6f, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x43, 0x0a, 0x0a, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x73, 0x68, 0x61, 0x63, 0x6b, 0x62, 0x75, 0x73, 0x2e, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2e,
	0x56, 0x66, 0x6f, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a,
	0x3c, 0x0a, 0x0e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a,
	0x0b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x80, 0x04, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x61, 0x73, 0x5f, 0x66, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x68, 0x61, 0x73,
	0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x61, 0x73,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x68, 0x61, 0x73, 0x5f, 0x70, 0x62, 0x5f, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x50,
	0x62, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x5f, 0x61, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x61, 0x73, 0x41, 0x6e, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x5f, 0x72, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x68, 0x61, 0x73, 0x52, 0x69, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x5f,
	0x78, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x61, 0x73, 0x58, 0x69,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x68, 0x61, 0x73, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x12, 0x26,
	0x0a, 0x0f, 0x68, 0x61, 0x73, 0x5f, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x65,
	0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x68, 0x61, 0x73, 0x54, 0x75, 0x6e, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x65, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x61, 0x73, 0x5f, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x68,
	0x61, 0x73, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x68,
	0x61, 0x73, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x68, 0x61, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x68, 0x61,
	0x73, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x68, 0x61, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x5f, 0x70, 0x74, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x68, 0x61, 0x73, 0x50, 0x74, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x68, 0x61,
	0x73, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x5f, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x68, 0x61, 0x73, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x4f, 0x6e, 0x12, 0x30, 0x0a, 0x14,
	0x68, 0x61, 0x73, 0x5f, 0x70, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x68, 0x61, 0x73, 0x50,
	0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x2a,
	0x0a, 0x11, 0x68, 0x61, 0x73, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x68, 0x61, 0x73, 0x53, 0x79,
	0x6e, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0x23, 0x0a, 0x07, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22,
	0x53, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6d,
	0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x03, 0x6d, 0x61, 0x78, 0x22, 0x34, 0x0a, 0x08, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x66, 0x75, 0x6e, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x66, 0x75, 0x6e, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x31, 0x0a, 0x05, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x75, 0x6e, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x66, 0x75, 0x6e, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x37, 0x0a,
	0x09, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x7f, 0x0a, 0x05, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x66, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x66,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x62, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x70, 0x62, 0x57, 0x69, 0x64, 0x74, 0x68, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x3b, 0x76, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_radio_proto_rawDescOnce sync.Once
	file_radio_proto_rawDescData = file_radio_proto_rawDesc
)

func file_radio_proto_rawDescGZIP() []byte {
	file_radio_proto_rawDescOnce.Do(func() {
		file_radio_proto_rawDescData = protoimpl.X.CompressGZIP(file_radio_proto_rawDescData)
	})
	return file_radio_proto_rawDescData
}

var file_radio_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_radio_proto_goTypes = []interface{}{
	(*State)(nil),        // 0: shackbus.radio.State
	(*SetState)(nil),     // 1: shackbus.radio.SetState
	(*Capabilities)(nil), // 2: shackbus.radio.Capabilities
	(*Int32List)(nil),    // 3: shackbus.radio.Int32List
	(*Vfo)(nil),          // 4: shackbus.radio.Vfo
	(*MetaData)(nil),     // 5: shackbus.radio.MetaData
	(*Channel)(nil),      // 6: shackbus.radio.Channel
	(*Value)(nil),        // 7: shackbus.radio.Value
	(*Function)(nil),     // 8: shackbus.radio.Function
	(*Level)(nil),        // 9: shackbus.radio.Level
	(*Parameter)(nil),    // 10: shackbus.radio.Parameter
	(*Split)(nil),        // 11: shackbus.radio.Split
	nil,                  // 12: shackbus.radio.Capabilities.FiltersEntry
	nil,                  // 13: shackbus.radio.Capabilities.TuningStepsEntry
	nil,                  // 14: shackbus.radio.Vfo.FunctionsEntry
	nil,                  // 15: shackbus.radio.Vfo.LevelsEntry
	nil,                  // 16: shackbus.radio.Vfo.ParametersEntry
}
var file_radio_proto_depIdxs = []int32{
	4,  // 0: shackbus.radio.State.vfo:type_name -> shackbus.radio.Vfo
	6,  // 1: shackbus.radio.State.channel:type_name -> shackbus.radio.Channel
	4,  // 2: shackbus.radio.SetState.vfo:type_name -> shackbus.radio.Vfo
	6,  // 3: shackbus.radio.SetState.channel:type_name -> shackbus.radio.Channel
	5,  // 4: shackbus.radio.SetState.md:type_name -> shackbus.radio.MetaData
	7,  // 5: shackbus.radio.Capabilities.get_levels:type_name -> shackbus.radio.Value
	7,  // 6: shackbus.radio.Capabilities.set_levels:type_name -> shackbus.radio.Value
	7,  // 7: shackbus.radio.Capabilities.get_parameters:type_name -> shackbus.radio.Value
	7,  // 8: shackbus.radio.Capabilities.set_parameters:type_name -> shackbus.radio.Value
	12, // 9: shackbus.radio.Capabilities.filters:type_name -> shackbus.radio.Capabilities.FiltersEntry
	13, // 10: shackbus.radio.Capabilities.tuning_steps:type_name -> shackbus.radio.Capabilities.TuningStepsEntry
	11, // 11: shackbus.radio.Vfo.split:type_name -> shackbus.radio.Split
	14, // 12: shackbus.radio.Vfo.functions:type_name -> shackbus.radio.Vfo.FunctionsEntry
	15, // 13: shackbus.radio.Vfo.levels:type_name -> shackbus.radio.Vfo.LevelsEntry
	16, // 14: shackbus.radio.Vfo.parameters:type_name -> shackbus.radio.Vfo.ParametersEntry
	3,  // 15: shackbus.radio.Capabilities.FiltersEntry.value:type_name -> shackbus.radio.Int32List
	3,  // 16: shackbus.radio.Capabilities.TuningStepsEntry.value:type_name -> shackbus.radio.Int32List
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_radio_proto_init() }
func file_radio_proto_init() {
	if File_radio_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_radio_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_radio_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_radio_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Capabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_radio_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Int32List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_radio_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_radio_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_radio_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Channel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_radio_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_radio_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Function); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_radio_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Level); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_radio_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Parameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_radio_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Split); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_radio_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_radio_proto_goTypes,
		DependencyIndexes: file_radio_proto_depIdxs,
		MessageInfos:      file_radio_proto_msgTypes,
	}.Build()
	File_radio_proto = out.File
	file_radio_proto_rawDesc = nil
	file_radio_proto_goTypes = nil
	file_radio_proto_depIdxs = nil
}
